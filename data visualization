from bs4 import BeautifulSoup
import pandas as pd
import re
from datetime import datetime
import matplotlib.pyplot as plt
import seaborn as sns

# Load the HTML file
file_path = '/mnt/data/izleme gecçmiṡi.html'
with open(file_path, 'r', encoding='utf-8') as file:
    soup = BeautifulSoup(file, 'html.parser')

# Extract watch history data from the HTML
watch_history = []
for entry in soup.find_all('div', class_='content-cell mdl-cell mdl-cell--6-col mdl-typography--body-1'):
    text = entry.get_text(strip=True)
    watch_history.append(text)

# Mapping Turkish month abbreviations to English equivalents
turkish_to_english_months = {
    "Oca": "Jan",
    "Şub": "Feb",
    "Mar": "Mar",
    "Nis": "Apr",
    "May": "May",
    "Haz": "Jun",
    "Tem": "Jul",
    "Ağu": "Aug",
    "Eyl": "Sep",
    "Eki": "Oct",
    "Kas": "Nov",
    "Ara": "Dec"
}

def convert_turkish_date_to_english(turkish_date):
    for turkish, english in turkish_to_english_months.items():
        turkish_date = turkish_date.replace(turkish, english)
    return turkish_date

# Parse the watch history data
parsed_history = []
for entry in watch_history:
    # Extract video title, channel, and timestamp using regex
    match = re.search(r"(.+?)adlı videoyu izlediniz(.+?)\d{2} \w+ \d{4} \d{2}:\d{2}:\d{2}", entry)
    timestamp_match = re.search(r"\d{2} \w+ \d{4} \d{2}:\d{2}:\d{2}", entry)
    
    if match and timestamp_match:
        video_title = match.group(1).strip()
        channel = match.group(2).strip()
        timestamp = timestamp_match.group(0)
        
        # Convert Turkish date to English and parse as datetime
        english_timestamp = convert_turkish_date_to_english(timestamp)
        datetime_obj = datetime.strptime(english_timestamp, '%d %b %Y %H:%M:%S')
        parsed_history.append({"Video Title": video_title, "Channel": channel, "Timestamp": datetime_obj})

# Create a DataFrame for analysis
df_watch_history = pd.DataFrame(parsed_history)

# Add columns for hour and day of the week
df_watch_history['Hour'] = df_watch_history['Timestamp'].dt.hour
df_watch_history['Day'] = df_watch_history['Timestamp'].dt.day_name()

# Top channels analysis
top_channels = df_watch_history['Channel'].value_counts().head(5)
print("Top Channels:")
print(top_channels)

# Recommended Channels (based on top channels)
recommended_channels = top_channels.index.tolist()
print("\nRecommended Channels:")
print(recommended_channels)

# Viewing habits by hour
hourly_watch_counts = df_watch_history.groupby('Hour').size()

# Viewing habits by day
daily_watch_counts = df_watch_history.groupby('Day').size()

# Data visualizations
plt.figure(figsize=(10, 6))
plt.bar(hourly_watch_counts.index, hourly_watch_counts.values)
plt.xlabel('Hour of the Day')
plt.ylabel('Number of Videos Watched')
plt.title('YouTube Viewing Habits by Hour of the Day')
plt.xticks(range(24))
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.show()

plt.figure(figsize=(8, 6))
plt.pie(top_channels, labels=top_channels.index, autopct='%1.1f%%', startangle=140)
plt.title('Top Channels Distribution')
plt.show()

# Heatmap of viewing habits (Hour vs Day)
hour_day_counts = df_watch_history.groupby(['Day', 'Hour']).size().unstack(fill_value=0)
plt.figure(figsize=(12, 8))
sns.heatmap(hour_day_counts, cmap="YlGnBu", annot=True, fmt="d")
plt.title('Viewing Habits Heatmap (Hour vs Day)')
plt.xlabel('Hour of the Day')
plt.ylabel('Day of the Week')
plt.show()

