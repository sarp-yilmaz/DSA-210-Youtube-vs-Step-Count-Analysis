from bs4 import BeautifulSoup
import pandas as pd
import matplotlib.pyplot as plt
from datetime import datetime

# Step 1: Load and Parse HTML File
def load_html_watch_history(file_path):
    """Load and parse the HTML watch history file."""
    with open(file_path, 'r', encoding='utf-8') as file:
        soup = BeautifulSoup(file, 'html.parser')
    return soup

# Step 2: Extract Watch History Data
def extract_html_watch_history(soup):
    """Extract relevant data from the parsed HTML file."""
    records = []
    for i, entry in enumerate(soup.find_all('div', class_='content-cell')):
        # Print the raw HTML for debugging
        if i < 5:  # Limit to the first 5 entries for clarity
            print(entry.prettify())

        # Extract video title
        title_tag = entry.find('a')
        title = title_tag.text if title_tag else "Unknown"

        # Try to extract timestamp (placeholder logic, will refine after inspection)
        time = None

        # Append to records
        records.append({'title': title, 'time': time})

    return pd.DataFrame(records)



# Step 3: Save Data to CSV
def save_data(df, output_path):
    """Save the DataFrame to a CSV file."""
    df.to_csv(output_path, index=False)
    print(f"Data saved to {output_path}")

# Step 4: Visualize Watch History
def visualize_watch_history(df):
    """Create visualizations for the watch history data."""
    # Ensure 'time' is in datetime format
    df['time'] = pd.to_datetime(df['time'], errors='coerce')
    df = df.dropna(subset=['time'])  # Remove invalid entries

    # Check if DataFrame is empty after cleaning
    if df.empty:
        print("No valid data available for visualization.")
        return

    # Extract hour and day information
    df['hour'] = df['time'].dt.hour
    df['day'] = df['time'].dt.day_name()

    # Ensure there is data in 'hour' column
    if df['hour'].empty:
        print("No hourly data available for visualization.")
        return

    # Viewing activity by hour
    df['hour'].value_counts().sort_index().plot(kind='bar', figsize=(10, 5), color='skyblue')
    plt.title("Viewing Activity by Hour")
    plt.xlabel("Hour of Day")
    plt.ylabel("Number of Videos Watched")
    plt.xticks(range(0, 24))
    plt.grid(axis='y', linestyle='--', alpha=0.7)
    plt.show()

    # Viewing activity by day
    df['day'].value_counts().reindex([
        'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'
    ]).plot(kind='bar', figsize=(10, 5), color='lightcoral')
    plt.title("Viewing Activity by Day")
    plt.xlabel("Day of Week")
    plt.ylabel("Number of Videos Watched")
    plt.grid(axis='y', linestyle='--', alpha=0.7)
    plt.show()

    # Viewing activity by period
    df['period'] = pd.cut(df['hour'], bins=[0, 6, 12, 18, 24], labels=['Night', 'Morning', 'Afternoon', 'Evening'])
    df['period'].value_counts().plot(kind='pie', figsize=(8, 8), autopct='%1.1f%%', colors=['#FFD700', '#ADFF2F', '#00BFFF', '#FF4500'])
    plt.title("Viewing Activity by Time of Day")
    plt.ylabel("")
    plt.show()
# Step 5: Main Function
def main():
    # File path (change these values)
    file_path = "izleme geçmişi.html"  # Replace with your HTML file path
    output_path = "watch_history.csv"  # Output file path

    # Load and parse HTML file
    soup = load_html_watch_history(file_path)

    # Extract and process watch history
    df = extract_html_watch_history(soup)

    # Save data
    save_data(df, output_path)

    # Visualize data
    visualize_watch_history(df)

    # Preview data
    print("Watch History:")
    print(df.head())

# Run the script
if __name__ == "__main__":
    main()
